{"version":3,"file":"index.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/constat.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// Находим форму в DOM\r\nexport const formElement = document.querySelector(\".popup__form\");\r\nexport const editFormElement = document.forms[\"edit-profile\"];\r\nexport const newPlaceFormElement = document.forms[\"new-place\"];\r\nexport const avatarFormElement = document.forms[\"edit-avatar\"];\r\n//кнопки\r\nexport const buttonEditProfile = editFormElement.querySelector('.popup__button');\r\nexport const buttonNewCard = newPlaceFormElement.querySelector('.popup__button');\r\nexport const buttonEditAvatar = avatarFormElement.querySelector('.popup__button');\r\nexport const buttonTypeCard = document.querySelector('.popup_type_image');\r\nexport const profileEditButton = document.querySelector(\".profile__edit-button\");\r\nexport const profileAddButton = document.querySelector(\".profile__add-button\");\r\nexport const avatarButton = document.querySelector(\".profile__avatar-button\");\r\n\r\n// попапы\r\nexport const popupsArray = Array.from(document.querySelectorAll('.popup'));\r\nexport const editForm = document.querySelector('.popup_type_edit');\r\nexport const newCardForm = document.querySelector('.popup_type_new-card');\r\nexport const avatarForm = document.querySelector(\".popup_type_avatar\");\r\n// Контейнер для карточек\r\nexport const placesList = document.querySelector(\".places__list\");\r\n// поля формы\r\nexport const avatarImage = document.querySelector(\".profile__image\");\r\nexport const nameInput = document.querySelector('.popup__input_type_name');\r\nexport const jobInput = document.querySelector('.popup__input_type_description');\r\n// Элементы, куда должны быть вставлены значения полей\r\nexport const userNameElement = document.querySelector('.profile__title');\r\nexport const userJobElement = document.querySelector('.profile__description');\r\n// Получаем значения полей формы\r\nexport const newPlaceNameInput = newPlaceFormElement.elements[\"place-name\"];\r\nexport const newLinkInput = newPlaceFormElement.elements.link;\r\n// Попап с картинкой\r\nexport const popupImageCaption = document.querySelector(\".popup__caption\");\r\nexport const popupImage = document.querySelector(\".popup__image\");\r\n\r\n","import {popupsArray} from './constat.js';\r\n//функции для открытия и закрытия всплывающих окон,\r\n//также для обработки клавиши escape и слушатель overlay click\r\nfunction handleEscClick(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = popupsArray.find(popup => popup.classList.contains('popup_is-opened'));\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleOverlayClick(evt) { \r\n    if (evt.target === evt.currentTarget) {\r\n      closePopup(evt.target);\r\n  }\r\n}\r\n\r\nfunction handleCloseButtonClick(evt) {\r\n  const button = evt.target;\r\n  const popup = button.closest('.popup');\r\n  closePopup(popup);\r\n}\r\n\r\nfunction openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    document.addEventListener(\"keydown\", handleEscClick);\r\n}\r\n\r\nfunction closePopup(popup) {\r\n//   if (!popup) {\r\n//     popup.classList.remove('popup_is-opened');\r\n//     document.removeEventListener('keydown', handleEscClick);\r\n// }\r\npopup.classList.remove('popup_is-opened');\r\ndocument.removeEventListener('keydown', handleEscClick);\r\n}\r\n\r\nexport { \r\n    handleOverlayClick,\r\n    closePopup, \r\n    openPopup,\r\n    handleCloseButtonClick\r\n};","const baseUrl = \"https://nomoreparties.co/v1/wff-cohort-7\";\r\nconst apiRoutes = {\r\n  user: \"users/me\",\r\n  cards: \"cards\",\r\n  likes: \"likes\",\r\n};\r\n\r\nconst headers = {\r\n  Authorization: \"32e48890-9f28-47a5-845e-3c6381af43ab\",\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst checkData = (data) => {\r\n  if (data.ok) {\r\n    return data.json();\r\n  } else {\r\n    return Promise.reject(`Error: ${data.status}`);\r\n  }\r\n};\r\n\r\nfunction request(endpoint, options) {\r\n  return fetch(`${baseUrl}/${endpoint}`, options).then(checkData);\r\n}\r\n\r\nconst getCards = () => {\r\n  return request(apiRoutes.cards, {\r\n    method: \"GET\",\r\n    headers,\r\n  });\r\n};\r\n\r\nconst postCard = (data) => {\r\n  return request(apiRoutes.cards, {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({\r\n      name: data.name,\r\n      link: data.link,\r\n    }),\r\n  });\r\n};\r\n\r\nconst deleteCardApi = (cardId) => {\r\n  return request(`${apiRoutes.cards}/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers,\r\n  });\r\n};\r\n\r\nconst getUser = () => {\r\n  return request(apiRoutes.user, {\r\n    method: \"GET\",\r\n    headers,\r\n  });\r\n};\r\n\r\nconst patchUser = (dataUser) => {\r\n  return request(apiRoutes.user, {\r\n    method: \"PATCH\",\r\n    headers,\r\n    body: JSON.stringify({\r\n      name: dataUser.name,\r\n      about: dataUser.about,\r\n    }),\r\n  });\r\n}\r\n\r\nconst addLikeCard = (id)  => {\r\n  return request(`${apiRoutes.cards}/${apiRoutes.likes}/${id}`, {\r\n    method: \"PUT\",\r\n    headers\r\n  });\r\n};\r\n\r\nconst deleteLikeCard = (id) => {\r\n  return request(`${apiRoutes.cards}/${apiRoutes.likes}/${id}`, {\r\n    method: \"DELETE\",\r\n    headers,\r\n  });\r\n};\r\n\r\nconst getAvatar = (avatar) => {\r\n  return request(`${apiRoutes.user}/avatar`, {\r\n    method: \"PATCH\",\r\n    headers,\r\n    body: JSON.stringify({ avatar: avatar }),\r\n  });\r\n};\r\nexport {\r\n  getCards,\r\n  postCard,\r\n  deleteCardApi,\r\n  getUser,\r\n  patchUser,\r\n  addLikeCard,\r\n  deleteLikeCard,\r\n  getAvatar\r\n}","import {\r\n  popupImage,\r\n  popupImageCaption,\r\n  buttonTypeCard,\r\n  userId,\r\n} from \"./constat\";\r\nimport {\r\n  addLikeCard,\r\n  deleteCardApi,\r\n  deleteLikeCard,\r\n} from \"./api\";\r\n// Функция добавления темплейта\r\nexport function createCard(cards, callbacksObject, userId) {\r\n  const {\r\n    deleteCardCallback,\r\n    openImageCallback,\r\n    likeCardCallback,\r\n    countLikesCallback,\r\n  } = callbacksObject;\r\n  // Создание темплейта\r\n  const cardTemplate = document.querySelector(\"#card-template\");\r\n  const cardElement = cardTemplate.content\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true);\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n  const cardTitle = cardElement.querySelector(\".card__title\");\r\n  const cardLikeButton = cardElement.querySelector(\".card__like-button\");\r\n  const cardLikeCounter = cardElement.querySelector(\".card__like-counter\");\r\n  // Заполняем атрибуты картинки и текста данными\r\n  cardImage.src = cards.link;\r\n  cardImage.alt = cards.name;\r\n  cardTitle.textContent = cards.name;\r\n  cardLikeCounter.innerText = cards.likes.length;\r\n  const cardId = cards.owner._id;\r\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n\r\n  // Слушатель удаления карточки если пользователь является владельцем\r\n  if (userId === cardId) {\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      deleteCardCallback(userId, cardElement);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n  // Слушатель лайка\r\n  cardLikeButton.addEventListener(\"click\", () => {\r\n    likeCardCallback(cardLikeButton);\r\n    countLikesCallback(cardLikeCounter, cardLikeButton, cards);\r\n  });\r\n\r\n  // Слушатель добавления картинки\r\n  cardImage.addEventListener(\"click\", () => {\r\n    openImageCallback(cardImage, popupImage, popupImageCaption, buttonTypeCard);\r\n  });\r\n  // Слушатель лайка\r\n\r\n  // Возвращаем созданный темплейт\r\n  return cardElement;\r\n}\r\n\r\n// Функция удаления карточки\r\nexport function deleteCard(cardElement) {\r\n  deleteCardApi(cardElement.cardsset.id)\r\n    .then(() => {\r\n      cardElement.remove();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при удалении карты:\", error);\r\n    });\r\n}\r\n\r\n// Функция лайка\r\nexport function handleLike(cardLikeButton) {\r\n  cardLikeButton.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\n// Функция подсчета лайков\r\nexport function countLikes(cardLikeCounter, cardLikeButton, cards) {\r\n  if (cardLikeButton.classList.contains(\"card__like-button_is-active\")) {\r\n    // Пользователю уже понравилась карточка, поэтому выполните операцию \"не нравится\".\r\n    deleteLikeCard(cards._id)\r\n    .then((res) => {\r\n      console.log(\"Response from deleteLikeCard:\", res);\r\n      cardLikeButton.classList.remove(\"card__like-button_is-active\");\r\n      cardLikeCounter.innerText = res.likes.length;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Произошла ошибка при удалении лайка:\", err);\r\n    });\r\n  } else {\r\n    // понравилась карта, поэтому выполните аналогичную операцию\r\n    addLikeCard(cards._id)\r\n    .then((res) => {\r\n      console.log(\"Response from addLikeCard:\", res);\r\n      cardLikeButton.classList.add(\"card__like-button_is-active\");\r\n      cardLikeCounter.innerText = res.likes.length;\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Произошла ошибка при добавлении лайка:\", err);\r\n    });\r\n  }\r\n}\r\n","// Добавление ерора\r\nconst showInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = inputElement.validationMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n// Удаление ерора\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\n// Проверка на валидность\r\nconst checkInputValidity = (formElement, inputElement, validationConfig) => {\r\n  if (!inputElement.validity.valid) {\r\n      showInputError(formElement, inputElement, validationConfig);\r\n  } else {\r\n      hideInputError(formElement, inputElement, validationConfig);\r\n  }\r\n};\r\n\r\n// Проверить, есть ли хотя бы один инпут непрошедший валидацию\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n  });\r\n}\r\n\r\n// Переключить состояние кнопки\r\nconst toggleButtonState = (inputList, validationConfig, buttonElementReturn) => {\r\n  if (hasInvalidInput(inputList)) {\r\n      buttonElementReturn.setAttribute(\"disabled\", true);\r\n      buttonElementReturn.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n      buttonElementReturn.removeAttribute(\"disabled\", false);\r\n      buttonElementReturn.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\n// Включение валидации\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n  toggleButtonState(inputList, validationConfig, buttonElement);\r\n\r\n  inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener(\"input\", function () {\r\n          checkInputValidity(formElement, inputElement, validationConfig);\r\n          toggleButtonState(inputList, validationConfig, buttonElement);\r\n      });\r\n  });\r\n};\r\n\r\n// Циклическое добавление валидации ко всем формам попапов\r\nconst enableValidation = (validationConfig) => {\r\n  const formElementList = Array.from(document.querySelectorAll(validationConfig.formSelector));\r\n\r\n  formElementList.forEach((formElement) => {\r\n      setEventListeners(formElement, validationConfig);\r\n  })\r\n\r\n}\r\n\r\n// Очистка поля\r\nfunction clearValidation(formElement, validationConfig) {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElementReturn = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => hideInputError(formElement, inputElement, validationConfig));\r\n  toggleButtonState(inputList, validationConfig, buttonElementReturn);\r\n}\r\n\r\nexport { enableValidation as validation, clearValidation };\r\n\r\n","import \"./pages/index.css\";\nimport {\n  closePopup,\n  openPopup,\n  handleOverlayClick,\n  handleCloseButtonClick,\n} from \"./components/modal.js\";\n// import {initialCards} from './components/cards.js';\nimport { createCard, handleLike, deleteCard, countLikes } from \"./components/card.js\";\nimport {\n  popupsArray,\n  placesList,\n  editForm,\n  editFormElement,\n  buttonEditProfile,\n  profileEditButton,\n  userNameElement,\n  userJobElement,\n  popupImageCaption,\n  newPlaceFormElement,\n  newCardForm,\n  newPlaceNameInput,\n  newLinkInput,\n  buttonNewCard,\n  buttonTypeCard,\n  profileAddButton,\n  nameInput,\n  jobInput,\n  avatarForm,\n  avatarFormElement,\n  avatarButton,\n  avatarImage,\n} from \"./components/constat.js\";\nimport { validation, clearValidation } from \"./components/validation.js\";\nimport {\n  getCards,\n  postCard,\n  getUser,\n  patchUser,\n  getAvatar,\n} from \"./components/api.js\";\nlet userId;\n// Объект с колбэками\nconst callbacksObject = {\n  deleteCardCallback: deleteCard,\n  openImageCallback: openImagePopup,\n  likeCardCallback: handleLike,\n  countLikesCallback: countLikes,\n};\n\n// Валидация\nconst validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".form__input\",\n  submitButtonSelector: \".button\",\n  inactiveButtonClass: \"button_inactive\",\n  inputErrorClass: \"form__input_type_error\",\n  errorClass: \"form__input-error_active\",\n};\n\nvalidation(validationConfig);\n\n// информация о пользователе\nfunction setUserInfo(dataUser) {\n  userNameElement.textContent = dataUser.name;\n  userJobElement.textContent = dataUser.about;\n  avatarImage.setAttribute(\n    \"style\",\n    `background-image: url('${dataUser.avatar}')`\n  );\n  userId = { id: dataUser._id };\n}\n\n// Функция с циклом выведения карточек на страницу\nfunction renderCards(cards, callbacksObject, userId) {\n  placesList.innerHTML = \"\";\n  for (let i = 0; i < cards.length; i++) {\n    const cardElement = createCard(cards[i], callbacksObject, userId);\n    placesList.appendChild(cardElement);\n  }\n}\n\n//Поля формы\nfunction setInitialEditProfileFormValues(dataUser) {\n  if (dataUser) {\n    nameInput.value = userNameElement.textContent;\n    jobInput.value = userJobElement.textContent;\n  }\n}\n\n// открыть попап с данными профиля\nprofileEditButton.addEventListener(\"click\", () => {\n  clearValidation(editFormElement, validationConfig);\n  setInitialEditProfileFormValues();\n  openPopup(editForm);\n});\n\n// открыть попап с картинкой\nexport function openImagePopup(\n  cardImg,\n  popupImage,\n  popupImageCaption,\n  buttonTypeCard\n) {\n  popupImage.src = cardImg.src;\n  popupImage.alt = cardImg.alt;\n  popupImageCaption.textContent = cardImg.alt;\n  clearValidation(newPlaceFormElement, validationConfig);\n  openPopup(buttonTypeCard);\n}\n\n// открыть попап с формой добавления карточки\nprofileAddButton.addEventListener(\"click\", () => {\n  openPopup(newCardForm);\n});\n\n// открыть попап с формой добавления аватара\navatarImage.addEventListener(\"click\", () => {\n  openPopup(avatarForm);\n});\n\n// слушатели обработчиков закрытия по оверлей и кнопке закрытия\npopupsArray.forEach((popup) => {\n  const closeButton = popup.querySelector(\".popup__close\");\n  popup.addEventListener(\"click\", handleOverlayClick);\n  closeButton.addEventListener(\"click\", handleCloseButtonClick);\n});\n\n//форма редактирования профиля\nexport function handleFormSubmit(evt) {\n  evt.preventDefault();\n  buttonEditProfile.textContent = \"Сохранение...\";\n  // отправка данных профиля\n  patchUser(nameInput.value, jobInput.value)\n    .then((dataUser) => {\n      setInitialEditProfileFormValues(dataUser);\n      closePopup(evt.target.closest(\".popup_is-opened\"));\n      editFormElement.reset();\n    })\n    .catch((err) => {\n      console.log(\"Произошла ошибка при редактировании профиля:\", err);\n    })\n    .finally(() => {\n      clearValidation(editFormElement, validationConfig);\n      buttonEditProfile.textContent = \"Сохранить\";\n    });\n}\n\nfunction handleNewCardFormSubmit(event) {\n  event.preventDefault();\n  buttonNewCard.textContent = \"Сохранение...\";\n  // создание новой карточки \n  postCard(newPlaceNameInput.value, newLinkInput.value)\n    .then((card) => {\n      const createNewCard = createCard(card, callbacksObject, userId);\n      placesList.prepend(createNewCard);\n      newPlaceForm.reset();\n      closePopup(newCardForm);\n    })\n    .catch((err) => {\n      console.log(\"Произошла ошибка при добавлении карточки:\", err);\n    })\n    .finally(() => {\n      clearValidation(newCardForm, validationConfig);\n      buttonNewCard.textContent = \"Сохранить\";\n    });\n}\n\n// форма добавления аватара\nfunction handleAvatarFormSubmit(event) {\n  event.preventDefault();\n  buttonEditAvatar.textContent = \"Сохранение...\";\n  getAvatar(formAvatar.elements.link.value)\n    .then((avatar) => {\n      avatarImage.setAttribute(\"style\", `background-image: url('${avatar}')`);\n      closePopup(avatarFormElement);\n      formAvatar.reset();\n    })\n    .catch((err) => {\n      console.log(\"Произошла ошибка при обновлении аватара:\", err);\n    })\n    .finally(() => {\n      clearValidation(avatarForm, validationConfig);\n      buttonEditAvatar.textContent = \"Сохранить\";\n    });\n}\n\n// Слушатели форм\nnewPlaceFormElement.addEventListener(\"submit\", handleNewCardFormSubmit);\nnewCardForm.addEventListener(\"submit\", (event) =>\n  handleNewCardFormSubmit(event)\n);\navatarForm.addEventListener(\"submit\", (event) => {\n  handleAvatarFormSubmit(event, buttonEditAvatar);\n});\n\n// Промис получения информации о пользователе и карточках\nPromise.all([getUser(), getCards()])\n  .then(([userId, cards]) => {\n    setUserInfo(userId);\n    renderCards(cards, callbacksObject);\n  })\n  .catch((err) => {\n    console.log(\"Произошла ошибка при получении данных:\", err);\n  });\n"],"names":["document","querySelector","editFormElement","forms","newPlaceFormElement","avatarFormElement","buttonNewCard","buttonTypeCard","profileEditButton","profileAddButton","popupsArray","Array","from","querySelectorAll","editForm","newCardForm","avatarForm","placesList","avatarImage","nameInput","jobInput","userNameElement","userJobElement","newPlaceNameInput","elements","newLinkInput","link","popupImageCaption","popupImage","handleEscClick","evt","key","openedPopup","find","popup","classList","contains","closePopup","handleOverlayClick","target","currentTarget","handleCloseButtonClick","closest","openPopup","add","addEventListener","remove","removeEventListener","apiRoutes","headers","Authorization","checkData","data","ok","json","Promise","reject","concat","status","request","endpoint","options","fetch","then","createCard","cards","callbacksObject","userId","deleteCardCallback","openImageCallback","likeCardCallback","countLikesCallback","cardElement","content","cloneNode","cardImage","cardTitle","cardLikeButton","cardLikeCounter","src","alt","name","textContent","innerText","likes","length","cardId","owner","_id","deleteButton","style","display","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElementReturn","some","validity","valid","hasInvalidInput","removeAttribute","inactiveButtonClass","setAttribute","clearValidation","inputSelector","submitButtonSelector","forEach","cardsset","method","catch","error","console","cardImg","toggle","res","log","err","addLikeCard","formSelector","setUserInfo","dataUser","about","avatar","handleNewCardFormSubmit","event","preventDefault","value","body","JSON","stringify","card","createNewCard","prepend","newPlaceForm","reset","finally","buttonElement","validationMessage","showInputError","checkInputValidity","setEventListeners","validation","closeButton","buttonEditAvatar","formAvatar","handleAvatarFormSubmit","all","_ref","_ref2","innerHTML","i","renderCards","appendChild"],"sourceRoot":""}