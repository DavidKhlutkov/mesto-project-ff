{"version":3,"file":"index.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/constat.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/index.js","webpack://mesto-project-ff/./src/components/cards.js"],"sourcesContent":["//кнопки\r\nexport const buttonEditProfile = document.querySelector('.popup_type_edit');\r\nexport const buttonNewCard = document.querySelector('.popup_type_new-card');\r\nexport const buttonTypeCard = document.querySelector('.popup_type_image');\r\nexport const profileEditButton = document.querySelector(\".profile__edit-button\");\r\nexport const profileAddButton = document.querySelector(\".profile__add-button\");\r\n// Находим форму в DOM\r\nexport const profileFormElement = document.querySelector('.popup_type_edit .popup__form');\r\nexport const newPlaceFormElement = document.querySelector('.popup_type_new-card .popup__form');\r\n// поля формы\r\nexport const nameInput = document.querySelector('.popup__input_type_name');\r\nexport const jobInput = document.querySelector('.popup__input_type_description'); \r\n// Элементы, куда должны быть вставлены значения полей\r\nexport const userNameElement = document.querySelector('.user__name');\r\nexport const userJobElement = document.querySelector('.user__job');\r\n// попапы\r\nexport const popupsArray = Array.from(document.querySelectorAll('.popup'));\r\n// Контейнер для карточек\r\nexport const placesList = document.querySelector(\".places__list\");\r\n// Попап с картинкой\r\nexport const popupImageCaption = document.querySelector(\".popup__caption\");\r\nexport const popupImage = document.querySelector(\".popup__image\");","import {popupsArray} from './constat.js';\r\n//функции для открытия и закрытия всплывающих окон,\r\n//также для обработки клавиши escape и слушатель overlay click\r\nfunction handleEscClick(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = popupsArray.find(popup => popup.classList.contains('popup_is-opened'));\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleOverlayClick(evt) { \r\n    if (evt.target === evt.currentTarget) {\r\n      closePopup(evt.target);\r\n  }\r\n}\r\n\r\nfunction handleCloseButtonClick(evt) {\r\n  const button = evt.target;\r\n  const popup = button.closest('.popup');\r\n  closePopup(popup);\r\n}\r\n\r\nfunction openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    document.addEventListener(\"keydown\", handleEscClick);\r\n}\r\n\r\nfunction closePopup(popup) {\r\n//   if (!popup) {\r\n//     popup.classList.remove('popup_is-opened');\r\n//     document.removeEventListener('keydown', handleEscClick);\r\n// }\r\npopup.classList.remove('popup_is-opened');\r\ndocument.removeEventListener('keydown', handleEscClick);\r\n}\r\n\r\nexport { \r\n    handleOverlayClick,\r\n    closePopup, \r\n    openPopup,\r\n    handleCloseButtonClick\r\n};","import { popupImage, popupImageCaption, buttonTypeCard } from \"./constat\";\r\n// Функция добавления темплейта\r\nexport function createCard(data, callbacksObject) {\r\n  const { deleteCardCallback, openImageCallback, likeCardCallback } = callbacksObject;\r\n  // Создание темплейта\r\n    const cardTemplate = document.querySelector(\"#card-template\");\r\n    const cardElement = cardTemplate.content.querySelector(\".places__item\").cloneNode(true);\r\n    const cardImage = cardElement.querySelector(\".card__image\");\r\n    const cardTitle = cardElement.querySelector(\".card__title\");\r\n    const cardLikeButton = cardElement.querySelector('.card__like-button');\r\n  // Заполняем атрибуты картинки и текста данными\r\n    cardImage.src = data.link;\r\n    cardImage.alt = data.name;\r\n    cardTitle.textContent = data.name;\r\n    const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n  // Слушатель удаления карточки\r\n  deleteButton.addEventListener(\"click\", () => {\r\n    deleteCardCallback(cardElement);\r\n  });\r\n  // Слушатель добавления картинки \r\n  cardImage.addEventListener(\"click\", () => {\r\n    openImageCallback(cardImage, popupImage, popupImageCaption, buttonTypeCard);\r\n  })\r\n  // Слушатель лайка\r\n  cardLikeButton.addEventListener(\"click\", () => {\r\n    likeCardCallback(cardLikeButton);\r\n  });\r\n    return cardElement;\r\n}\r\n\r\n// Функция удаления карточки\r\nexport function deleteCard(cardElement) {\r\n  cardElement.remove();\r\n}\r\n\r\nexport function handleLike(cardLikeButton) {\r\n  cardLikeButton.classList.toggle(\"card__like-button_is-active\");\r\n}","import \"./pages/index.css\";\nimport {\n    closePopup,\n    openPopup,\n    handleOverlayClick,\n    handleCloseButtonClick\n} from './components/modal.js';\nimport {initialCards} from './components/cards.js';\nimport {\n  createCard,  \n  handleLike, \n  deleteCard} from './components/card.js';\nimport {\n  buttonEditProfile,\n  buttonNewCard,\n  buttonTypeCard,\n  profileEditButton,\n  profileAddButton,\n  nameInput,\n  placesList,\n  jobInput,\n  userNameElement,\n  userJobElement, \n  popupImageCaption,\n  popupsArray,\n  profileFormElement,\n  newPlaceFormElement\n} from './components/constat.js';\n\n// открыть попап с данными профиля\nprofileEditButton.addEventListener(\"click\", () => {\n  setInitialEditProfileFormValues();\n  openPopup(buttonEditProfile);\n});\n\n// Функция открытия попапа с картинкой\nexport function openImagePopup( cardImg, popupImage, popupImageCaption, buttonTypeCard ) {\n  popupImage.src = cardImg.src;\n  popupImage.alt = cardImg.alt;\n  popupImageCaption.textContent = cardImg.alt;\n  openPopup(buttonTypeCard);\n}\n\n// открыть попап с формой добавления карточки\nprofileAddButton.addEventListener(\"click\", () => {\n  openPopup(buttonNewCard);\n});\n\n// слушатели обработчиков закрытия по оверлей и кнопке закрытия\npopupsArray.forEach((popup) => {\n  const closeButton = popup.querySelector('.popup__close');\n  popup.addEventListener('click', handleOverlayClick);\n  closeButton.addEventListener('click', handleCloseButtonClick);\n});\n\n//Поля формы\nfunction setInitialEditProfileFormValues() {\n  if (userNameElement && userJobElement) {\n    nameInput.value = userNameElement.textContent;\n    jobInput.value = userJobElement.textContent;\n  }\n}\n\n//форма редактирования профиля\nexport function handleFormSubmit(evt) {\n  evt.preventDefault();\n  const newName = nameInput.value;\n  const newJob = jobInput.value;\n// Новые значения с помощью textContent\n  if (userNameElement && userJobElement) {\n    userNameElement.textContent = newName;\n    userJobElement.textContent = newJob;\n  }\n// закрыть попап автоматически можно вызовом соответствующей функции\n  closePopup(evt.target.closest(\".popup_is-opened\"));\n  profileFormElement.reset(); // очистка формы\n}\n\n//форма добавления карточки\nconst newCardForm = document.querySelector('.popup__form[name=\"new-place\"]');\nnewPlaceFormElement.addEventListener('submit', handleNewCardFormSubmit );\nnewCardForm.addEventListener(\"submit\", (event) =>\n  handleNewCardFormSubmit(event)\n);\n\n\n// Объект с колбэками\nexport const callbacksObject = {\n  deleteCardCallback: deleteCard,\n  openImageCallback: openImagePopup,\n  likeCardCallback: handleLike\n} ; \n\nfunction handleNewCardFormSubmit(event) {\n  event.preventDefault();\n  console.log(event.target);\n  // Получаем значения полей формы\n  const placeNameInput = event.target.querySelector('.popup__input[name=\"place-name\"]');\n  const linkInput = event.target.querySelector('.popup__input[name=\"link\"]');\n  const placeName = placeNameInput?.value || '';\n  const link = linkInput?.value || '';\n  // Создаем новую карточку\n  const newCard = createCard({ link, name: placeName }, callbacksObject);\n  // Добавляем новую карточку в начало контейнера для карточек\n  placesList.prepend(newCard);\n  // Очищаем форму\n  event.target.reset();\n  // Закрываем диалоговое окно\n  closePopup(buttonNewCard);\n}\n\n// Функция с циклом выведения карточек на страницу\nfunction renderCards(cards, callbacksObject) {\n  placesList.innerHTML = '';\n  for (let i = 0; i < cards.length; i++) {\n    const cardElement = createCard(cards[i], callbacksObject);\n    placesList.appendChild(cardElement);\n  }\n}\n\n// рендеринг начального набора карточек на странице\nrenderCards(initialCards, callbacksObject);","export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];"],"names":["buttonEditProfile","document","querySelector","buttonNewCard","buttonTypeCard","profileEditButton","profileAddButton","newPlaceFormElement","nameInput","jobInput","userNameElement","userJobElement","popupsArray","Array","from","querySelectorAll","placesList","popupImageCaption","popupImage","handleEscClick","evt","key","openedPopup","find","popup","classList","contains","closePopup","handleOverlayClick","target","currentTarget","handleCloseButtonClick","closest","openPopup","add","addEventListener","remove","removeEventListener","createCard","data","callbacksObject","deleteCardCallback","openImageCallback","likeCardCallback","cardElement","content","cloneNode","cardImage","cardTitle","cardLikeButton","src","link","alt","name","textContent","value","forEach","closeButton","newCardForm","handleNewCardFormSubmit","event","cardImg","toggle","preventDefault","console","log","placeNameInput","linkInput","placeName","newCard","prepend","reset","cards","innerHTML","i","length","appendChild","renderCards"],"sourceRoot":""}