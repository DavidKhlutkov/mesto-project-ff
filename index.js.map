{"version":3,"file":"index.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/constat.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// Находим форму в DOM\r\nexport const formElement = document.querySelector(\".popup__form\");\r\nexport const editFormElement = document.forms[\"edit-profile\"];\r\nexport const newPlaceFormElement = document.forms[\"new-place\"];\r\n// export const avatarFormElement = document.forms[\"edit-avatar\"];\r\n//кнопки\r\nexport const buttonEditProfile = editFormElement.querySelector('.popup__button');\r\nexport const buttonNewCard = newPlaceFormElement.querySelector('.popup__button');\r\n// export const buttonEditAvatar = avatarFormElement.querySelector('.popup__button');\r\nexport const buttonTypeCard = document.querySelector('.popup_type_image');\r\nexport const profileEditButton = document.querySelector(\".profile__edit-button\");\r\nexport const profileAddButton = document.querySelector(\".profile__add-button\");\r\n// export const avatarButton = document.querySelector(\".profile__avatar-button\");\r\n\r\n// аватар\r\n\r\n// поля формы\r\n// export const avatarImage = document.querySelector(\".profile__image\");\r\nexport const nameInput = document.querySelector('.popup__input_type_name');\r\nexport const jobInput = document.querySelector('.popup__input_type_description');\r\n// Элементы, куда должны быть вставлены значения полей\r\nexport const userNameElement = document.querySelector('.user__name');\r\nexport const userJobElement = document.querySelector('.user__job');\r\n// попапы\r\nexport const popupsArray = Array.from(document.querySelectorAll('.popup'));\r\nexport const editForm = document.querySelector('.popup_type_edit');\r\nexport const newCardForm = document.querySelector('.popup_type_new-card');\r\n// export const avatarForm = document.querySelector(\".popup_type_avatar\");\r\n// Контейнер для карточек\r\nexport const placesList = document.querySelector(\".places__list\");\r\n// Попап с картинкой\r\nexport const popupImageCaption = document.querySelector(\".popup__caption\");\r\nexport const popupImage = document.querySelector(\".popup__image\");","import {popupsArray} from './constat.js';\r\n//функции для открытия и закрытия всплывающих окон,\r\n//также для обработки клавиши escape и слушатель overlay click\r\nfunction handleEscClick(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = popupsArray.find(popup => popup.classList.contains('popup_is-opened'));\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleOverlayClick(evt) { \r\n    if (evt.target === evt.currentTarget) {\r\n      closePopup(evt.target);\r\n  }\r\n}\r\n\r\nfunction handleCloseButtonClick(evt) {\r\n  const button = evt.target;\r\n  const popup = button.closest('.popup');\r\n  closePopup(popup);\r\n}\r\n\r\nfunction openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    document.addEventListener(\"keydown\", handleEscClick);\r\n}\r\n\r\nfunction closePopup(popup) {\r\n//   if (!popup) {\r\n//     popup.classList.remove('popup_is-opened');\r\n//     document.removeEventListener('keydown', handleEscClick);\r\n// }\r\npopup.classList.remove('popup_is-opened');\r\ndocument.removeEventListener('keydown', handleEscClick);\r\n}\r\n\r\nexport { \r\n    handleOverlayClick,\r\n    closePopup, \r\n    openPopup,\r\n    handleCloseButtonClick\r\n};","export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];","const baseUrl = \"https://nomoreparties.co/v1/wff-cohort-7\";\r\nconst apiRoutes = {\r\n  user: \"users/me\",\r\n  cards: \"cards\",\r\n  likes: \"likes\",\r\n};\r\n\r\nconst headers = {\r\n  Authorization: \"32e48890-9f28-47a5-845e-3c6381af43ab\",\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst checkData = (data) => {\r\n  if (data.ok) {\r\n    return data.json();\r\n  } else {\r\n    return Promise.reject(`Error: ${data.status}`);\r\n  }\r\n};\r\n\r\nconst getCards = () => {\r\n  return fetch(`${baseUrl}/${apiRoutes.cards}`, {\r\n    method: \"GET\",\r\n    headers,\r\n  }).then(checkData);\r\n};\r\n\r\nconst postCard = (data) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.cards}`, {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({\r\n      name: data.name,\r\n      link: data.link,\r\n    }),\r\n  }).then(checkData);\r\n};\r\n\r\nconst deleteCardApi = (cardId) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.cards}/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers,\r\n  }).then(checkData);\r\n};\r\n\r\nconst getUser = () => {\r\n  return fetch(`${baseUrl}/${apiRoutes.user}`, {\r\n    method: \"GET\",\r\n    headers,\r\n  }).then(checkData);\r\n};\r\n\r\nconst patchUser = (dataUser) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.user}`, {\r\n    method: \"PATCH\",\r\n    headers,\r\n    body: JSON.stringify({\r\n      name: dataUser.name,\r\n      about: dataUser.about,\r\n    }).then(checkData)\r\n  });\r\n}\r\n\r\nconst addLikeCard = (cardId) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.cards}/${cardId}/${apiRoutes.likes}`, {\r\n    method: \"PUT\",\r\n    headers,\r\n  }).then(checkData);\r\n};\r\n\r\nconst deleteLikeCard = (cardId) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.cards}/${cardId}/${apiRoutes.likes}`, {\r\n    method: \"DELETE\",\r\n    headers,\r\n  }).then(checkData);\r\n};\r\n\r\nconst getAvatar = (avatar) => {\r\n  return fetch(`${baseUrl}/${apiRoutes.user}/avatar`, {\r\n    method: \"PATCH\",\r\n    headers,\r\n    body: JSON.stringify({ avatar: avatar }),\r\n  }).then(checkData);\r\n};\r\nexport {\r\n  getCards,\r\n  postCard,\r\n  deleteCardApi,\r\n  getUser,\r\n  patchUser,\r\n  addLikeCard,\r\n  deleteLikeCard,\r\n  getAvatar\r\n}","import { popupImage, popupImageCaption, buttonTypeCard } from \"./constat\";\r\nimport {\r\n  // getCards,\r\n  // getUser,\r\n  // postCard,\r\n  deleteCardApi,\r\n  // addLikeCard,\r\n  // deleteLikeCard\r\n} from \"./api\";\r\n// Функция добавления темплейта\r\nexport function createCard(data, callbacksObject) {\r\n  const { deleteCardCallback, openImageCallback, likeCardCallback } = callbacksObject;\r\n  // Создание темплейта\r\n    const cardTemplate = document.querySelector(\"#card-template\");\r\n    const cardElement = cardTemplate.content.querySelector(\".places__item\").cloneNode(true);\r\n    const cardImage = cardElement.querySelector(\".card__image\");\r\n    const cardTitle = cardElement.querySelector(\".card__title\");\r\n    const cardLikeButton = cardElement.querySelector('.card__like-button');\r\n  // Заполняем атрибуты картинки и текста данными\r\n    cardImage.src = data.link;\r\n    cardImage.alt = data.name;\r\n    cardTitle.textContent = data.name;\r\n    const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n  // Слушатель удаления карточки\r\n  deleteButton.addEventListener(\"click\", () => {\r\n    deleteCardCallback(cardElement);\r\n  });\r\n  // Слушатель добавления картинки \r\n  cardImage.addEventListener(\"click\", () => {\r\n    openImageCallback(cardImage, popupImage, popupImageCaption, buttonTypeCard);\r\n  })\r\n  // Слушатель лайка\r\n  cardLikeButton.addEventListener(\"click\", () => {\r\n    likeCardCallback(cardLikeButton);\r\n  });\r\n    return cardElement;\r\n}\r\n\r\n// Функция удаления карточки\r\nexport function deleteCard(cardElement) {\r\n  cardElement.remove();\r\n}\r\n\r\nexport function handleLike(cardLikeButton) {\r\n  cardLikeButton.classList.toggle(\"card__like-button_is-active\");\r\n}","import {formElement} from \"./constat.js\"\r\n// Добавление ерора\r\nconst showInputError = (formElement, inputElement, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.add(\"form__input_type_error\");\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(\"form__input-error_active\");\r\n};\r\n// Удаление ерора\r\nconst hideInputError = (formElement, inputElement) => {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.remove(\"form__input_type_error\");\r\n  errorElement.classList.remove(\"form__input-error_active\");\r\n  errorElement.textContent = \"\";\r\n};\r\n// Проверка на валидность\r\nconst checkInputValidity = (formElement, inputElement) => {\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(formElement, inputElement, inputElement.validationMessage);\r\n  } else {\r\n    hideInputError(formElement, inputElement);\r\n  }\r\n};\r\n// Активация кнопки\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  })\r\n}\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(\"button_inactive\");\r\n  } else {\r\n    buttonElement.removeAttribute(\"disabled\");\r\n    buttonElement.classList.remove(\"button_inactive\");\r\n  }\r\n};\r\n// Очистка поля\r\nexport function clearAreaValidation(formElement,validationConfig) {\r\n  const { inputSelector, submitButtonSelector } = validationConfig;\r\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement);\r\n  buttonElement.setAttribute(\"disabled\", true);\r\n}\r\n\r\n// Включение валидации\r\nconst setEventListeners = (formElement, validationConfig) => { \r\n  const { inputSelector, submitButtonSelector } = validationConfig;\r\n  const inputList = Array.from(formElement.querySelectorAll(console.dir(inputSelector))); \r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n  toggleButtonState(inputList, buttonElement);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", function () {\r\n      checkInputValidity(formElement, inputElement);\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n// \r\n\r\n export const enableValidation = (validationConfig) => {\r\n  const { inputSelector, formElement } = validationConfig;\r\n  const formElementList = Array.from(document.querySelectorAll(formElement));\r\n  formElementList.forEach((formElement) => {\r\n  formElement.addEventListener(\"submit\", (event) => {\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n})\r\n \r\n}\r\n\r\nexport { enableValidation as validation, clearAreaValidation as clearValidation };\r\n","import \"./pages/index.css\";\nimport {\n    closePopup,\n    openPopup,\n    handleOverlayClick,\n    handleCloseButtonClick\n} from './components/modal.js';\nimport {initialCards} from './components/cards.js';\nimport {\n  createCard,  \n  handleLike, \n  deleteCard,\n} from './components/card.js';\nimport {\n  popupsArray,\n  placesList,\n  editForm,\n  editFormElement,\n  buttonEditProfile,\n  profileEditButton,\n  userNameElement,\n  userJobElement,\n  popupImageCaption,\n  newPlaceFormElement,\n  newCardForm, \n  buttonNewCard,\n  buttonTypeCard,\n  profileAddButton,\n  nameInput,\n  jobInput,\n  // avatarForm,\n  // avatarFormElement,\n  // avatarImage\n} from './components/constat.js';\nimport { validation, clearValidation} from './components/validation.js';\nimport {   getCards,\n  postCard,\n  // deleteCardApi,\n  getUser,\n  patchUser,\n  // addLikeCard,\n  // deleteLikeCard,\n  // addAvatar\n} from './components/api.js';\n\n// Объект с колбэками\nexport const callbacksObject = {\n  deleteCardCallback: deleteCard,\n  openImageCallback: openImagePopup,\n  likeCardCallback: handleLike\n} ; \n\n// Валидация\nconst validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.form__input',\n  submitButtonSelector: '.button',\n  inactiveButtonClass: 'button_inactive',\n  inputErrorClass: 'form__input_type_error',\n  errorClass: 'form__input-error_active'\n};\n\nvalidation(validationConfig);\n\n// информация о пользователе\n function getUserInfo (dataUser) {\n  userNameElement.textContent = dataUser.name;\n  userJobElement.textContent = dataUser.about;\n  avatarImage.setAttribute(\"style\", `background-image: url('${dataUser.avatar}')`);\n}\n\n//Поля формы\nfunction setInitialEditProfileFormValues(dataUser) {\n  if (dataUser) {\n    nameInput.value = dataUser.name;\n    jobInput.value = dataUser.about;\n  }\n}\n\n// открыть попап с данными профиля\nprofileEditButton.addEventListener(\"click\", () => {\n  clearValidation(editFormElement, validationConfig);\n  setInitialEditProfileFormValues();\n  openPopup(editForm);\n});\n\n// Функция открытия попапа с картинкой\nexport function openImagePopup( cardImg, popupImage, popupImageCaption, buttonTypeCard ) {\n  popupImage.src = cardImg.src;\n  popupImage.alt = cardImg.alt;\n  popupImageCaption.textContent = cardImg.alt;\n  clearValidation(newPlaceFormElement, validationConfig);\n  openPopup(buttonTypeCard);\n}\n\n// открыть попап с формой добавления карточки\nprofileAddButton.addEventListener(\"click\", () => {\n  openPopup(newCardForm);\n});\n\n// слушатели обработчиков закрытия по оверлей и кнопке закрытия\npopupsArray.forEach((popup) => {\n  const closeButton = popup.querySelector('.popup__close');\n  popup.addEventListener('click', handleOverlayClick);\n  closeButton.addEventListener('click', handleCloseButtonClick);\n});\n\n//форма редактирования профиля\nexport function handleFormSubmit(evt) {\n  evt.preventDefault();\n  buttonEditProfile.textContent = 'Сохранение...';\n  // отправка данных профиля\n  patchUser({\n    name: nameInput.value,\n    about: jobInput.value\n  }).then((dataUser) => {\n    setInitialEditProfileFormValues(dataUser);\n    closePopup(evt.target.closest(\".popup_is-opened\"));// закрыть попап автоматически можно вызовом соответствующей функции\n    editFormElement.reset();// очистка формы\n  })\n  .catch((err) => {\n    console.log(err);\n  })\n  .finally(() => {\n    clearValidation(editFormElement, validationConfig);\n    buttonEditProfile.textContent = 'Сохранить';\n  })\n}\n\n//Форма добавления карточки\nfunction handleNewCardFormSubmit(event) {\n  event.preventDefault();\n  console.log(event.target);\n  buttonNewCard.textContent = 'Сохранение...';\n  // Получаем значения полей формы\n  const placeNameInput = event.target.querySelector('.popup__input[name=\"place-name\"]');\n  const linkInput = event.target.querySelector('.popup__input[name=\"link\"]');\n  const placeName = placeNameInput?.value || '';\n  const link = linkInput?.value || '';\n  // Создаем новую карточку\n  const newCard = createCard( data = { name: placeName, link: link } , callbacksObject);\n  postCard(data = { name: placeName, link: link })\n    .then(() => {\n      // Добавляем новую карточку в начало контейнера для карточек\n      placesList.prepend(newCard);\n      // Очищаем форму\n      event.target.reset();\n      // Закрываем диалоговое окно\n      closePopup(newCardForm);\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      buttonNewCard.textContent = 'Сохранить';\n    })\n}\n\n// форма добавления аватара\n// function handleAvatarFormSubmit(event) {\n//   event.preventDefault();\n//   avatarForm.textContent = 'Сохранение...';\n//   const newAvatarUrl = avatarUrlInput.value;\n//   patchUser({ avatar: newAvatarUrl })\n//     .then((dataUser) => {\n//       avatarImage.src = dataUser.avatar;\n//       closePopup(avatarForm);\n//     })\n//     .catch((err) => {\n//       console.log(err);\n//     })\n//     .finally(() => {\n//       clearValidation(avatarForm, validationConfig);\n//       avatarForm.textContent = 'Сохранить';\n//     })\n// }\n\n\n// Слушатели форм\nnewPlaceFormElement.addEventListener('submit', handleNewCardFormSubmit );\nnewCardForm.addEventListener(\"submit\", (event) =>\n  handleNewCardFormSubmit(event)\n);\n// avatarForm.addEventListener(\"submit\", (event) => {\n//   handleAvatarFormSubmit(event);\n// });\n\n// Функция с циклом выведения карточек на страницу\nfunction renderCards(cards, callbacksObject) {\n  placesList.innerHTML = '';\n  for (let i = 0; i < cards.length; i++) {\n    const cardElement = createCard(cards[i], callbacksObject);\n    placesList.appendChild(cardElement);\n  }\n}\n\n// рендеринг начального набора карточек на странице\nrenderCards(initialCards, callbacksObject);\n\n// Промис получения информации о пользователе и карточках \nPromise.all([getUser(), getCards()])\n  .then(([cards, dataUser]) => {\n    getUserInfo(dataUser);\n    getCards(cards);\n  })\n  .catch((err) => {\n    console.log(err);\n  });"],"names":["document","querySelector","editFormElement","forms","newPlaceFormElement","buttonNewCard","buttonTypeCard","profileEditButton","profileAddButton","nameInput","jobInput","userNameElement","userJobElement","popupsArray","Array","from","querySelectorAll","editForm","newCardForm","placesList","popupImageCaption","popupImage","handleEscClick","evt","key","openedPopup","find","popup","classList","contains","closePopup","handleOverlayClick","target","currentTarget","handleCloseButtonClick","closest","openPopup","add","addEventListener","remove","removeEventListener","baseUrl","apiRoutes","headers","Authorization","checkData","data","ok","json","Promise","reject","concat","status","getCards","fetch","method","then","createCard","callbacksObject","deleteCardCallback","openImageCallback","likeCardCallback","cardElement","content","cloneNode","cardImage","cardTitle","cardLikeButton","src","link","alt","name","textContent","hideInputError","formElement","inputElement","errorElement","id","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","removeAttribute","clearAreaValidation","validationConfig","inputSelector","submitButtonSelector","forEach","setAttribute","cardImg","clearValidation","toggle","formSelector","inactiveButtonClass","inputErrorClass","errorClass","handleNewCardFormSubmit","event","preventDefault","console","log","placeNameInput","linkInput","placeName","value","newCard","body","JSON","stringify","postCard","prepend","reset","catch","err","finally","dir","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","validation","dataUser","about","closeButton","cards","innerHTML","i","length","appendChild","renderCards","all","_ref","_ref2","avatarImage","avatar"],"sourceRoot":""}